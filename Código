int pino2 = 2;      //Cria uma variável para o pino 2
bool estado_sensor; //Cria uma variável para armazenar o estado do sensor

#include <UIPEthernet.h>
#include <utility/logging.h>
#include <PubSubClient.h>

#include <SPI.h>
boolean mensagem;

//Define o endereço MAC que será utilizado
byte mac[] = {0XCA, 0X2E, 0XBF, 0XEC, 0XF0, 0X21};

//Inicia o cliente Ethernet
EthernetClient client;

PubSubClient mqqtClient(client); // Inicia o cliente PubSubClient

void setup()
{
    //Inicia o controlador Ethernet e solicita um IP para o servidor de DHCP
    Ethernet.begin(mac);

    //Inicia o monitor Serial
    Serial.begin(9600);

    pinMode(pino2, INPUT_PULLUP);

    mqqtClient.setServer("54.173.148.114", 1883);

    //Exibe no Monitor Serial as informações sobre o IP do Arduino
    Serial.print("O IP do Arduino e: ");
    Serial.println(Ethernet.localIP());

    //Exibe no Monitor Serial as informações sobre a Máscara de Rede do Arduino
    Serial.print("A Mascara de Rede do Arduino e: ");
    Serial.println(Ethernet.subnetMask());

    //Exibe no Monitor Serial as informações sobre o Gateway do Arduino
    Serial.print("O Gateway do Arduino e: ");
    Serial.println(Ethernet.gatewayIP());

    //Exibe uma linha em branco
    Serial.println("");
}

void loop()
{
    mqqtClient.connect("damiao"); //Define o nome do cliente MQTT

    estado_sensor = digitalRead(pino2);

    if (estado_sensor == 1)
    {
        mensagem = mqqtClient.publish("damiao-t", " RACK ABERTO ! ");
        Serial.println ("Aberto");
    }   
    else
    {
        mensagem = mqqtClient.publish("damiao-t", " RACK FECHADO ! ");
        Serial.println ("Fechado");
        }   
     
    mqqtClient.loop();

    Serial.println(mensagem);

  }
